call pathogen#infect()

set nocompatible
set clipboard=unnamed
syntax enable
colorscheme evening

filetype on
filetype indent on
filetype plugin on

set showcmd		    " Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch            " Highlight search results
set number
hi LineNr ctermfg=darkgray



set expandtab  "inserts space characters whenever the tab key is pressed
set tabstop=2  " number of space characters inserted when tab key is pressed
set shiftwidth=2 "number of space characters inserted for indentation

"set list listchars=tab:\ \ ,trail:Â·
set wildignore=*.pyc

"Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

"Easy timestamp
map T a<C-R>=strftime("%c")<CR><Esc>

"Some conveniences when working with split windows
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

autocmd BufReadPre *.doc set ro "Word documents can be read using antiword
autocmd BufReadPre *.doc set hlsearch!
autocmd BufReadPost *.doc %!antiword "%"

au filetype ruby set ts=2 sw=2
au BufReadPre,BufNewFile *.coffee set ts=2 sw=2

" Easy switch between .h and .cpp files - only works in same dir
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR> 

" CTags
" map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
set tags=tags;/

" Ack the current word
map <Leader>a :Ack <cword><CR>
" close the quickfix list
map <Leader>cl :ccl<CR>
" copy the current filename to the clipboard
map <Leader>cf :let @*=expand("%")<CR>
" copy the current absolute path to the clipboard
map <Leader>cp :let @*=expand("%:p")<CR>

" command t flush
map <Leader>ft :CommandTFlush<CR>

" command t flush
map <Leader>ft :CommandTFlush<CR>

augroup encrypted
    au!
    autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
    autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
    autocmd BufReadPre,FileReadPre      *.gpg set bin
    autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost    *.gpg '[,']!gpg --decrypt 2> /dev/null
    autocmd BufReadPost,FileReadPost    *.gpg set nobin
    autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
    autocmd BufWritePre,FileWritePre    *.gpg   '[,']!gpg --default-recipient-self -ae 2>/dev/null
    autocmd BufWritePost,FileWritePost    *.gpg   u
augroup END

augroup CPT
  au!
  au BufReadPre		 	*.cpt       set bin
  au BufReadPre,BufNewFile 	*.cpt       set viminfo=
  au BufReadPre,BufNewFile 	*.cpt       set noswapfile
  au BufReadPost,BufNewFile 	*.cpt      let $vimpass = inputsecret("Password: ")
  au BufReadPost 		*.cpt      silent '[,']!ccrypt -cb -E vimpass
  au BufReadPost	 	*.cpt      set nobin

  au BufWritePre *.cpt      set bin
  au BufWritePre *.cpt      '[,']!ccrypt -e -E vimpass
  au BufWritePost *.cpt     u
  au BufWritePost *.cpt     set nobin
augroup END

