call pathogen#infect()
call pathogen#helptags()

set nocompatible
set clipboard=unnamed
syntax enable

filetype on
filetype indent on
filetype plugin on

set showcmd		    " Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch            " Highlight search results
set number
hi LineNr ctermfg=darkgray



set expandtab  "inserts space characters whenever the tab key is pressed
set tabstop=2  " number of space characters inserted when tab key is pressed
set shiftwidth=2 "number of space characters inserted for indentation

"set list listchars=tab:\ \ ,trail:Â·
set wildignore=*.pyc,*/tmp/*,*/node_modules/*,*/public/*,*/genfiles/*,*/third_party/*,*/translations/*,*.class,tests_for*.json,*.pickle,request_log_data.json,*/content/backfill_data/*,*/build/kake/*-testfiles/*,

" disable includes when doing autocomplete
set complete=.,w,b,u,t

"highlight extra whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"remove trailing whitespace
nnoremap <Leader>rw :%s/\s\+$//e<CR>


"Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

"Easy timestamp
map T a<C-R>=strftime("%c")<CR><Esc>

"Some conveniences when working with split windows
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" ALE -- turn on fixers for js code
let g:ale_linters = {}  " defined below
let g:ale_fixers = {}   " defined below

" Ruby
au filetype ruby set ts=2 sw=2

" Python
au filetype python set ts=4 expandtab shiftwidth=4 softtabstop=4

" CoffeeScript
au BufReadPre,BufNewFile *.coffee set ts=2 sw=2

" JS / TS

au BufNewFile,BufReadPost *.ts set filetype=javascript

au filetype javascript let g:ale_fix_on_save = 1
au filetype javascript set signcolumn=yes
let g:ale_fixers.javascript = ['eslint']
let g:ale_linters.javascript = ['flow-language-server']
au BufRead,BufNewFile */khan/webapp* let b:ale_javascript_eslint_executable = $HOME."/khan/devtools/khan-linter/node_modules/.bin/eslint"
au BufRead,BufNewFile */khan/webapp* let b:ale_javascript_eslint_use_global = 1
au BufRead,BufNewFile */src/apollo* let b:ale_fixers = {'javascript': ['prettier']}



" Disable ale for third party code
let g:ale_pattern_options = {'.*/node_modules/.*': {'ale_enabled': 0}}


au filetype javascript nnoremap <buffer> <C-]> :ALEGoToDefinition<CR>


" Git grep the current word
map <Leader>a :Ggrep <cword><CR>
" setup a command to search for any word
map <Leader>s :Ggrep
" auto open the quick fix window after a grep
autocmd QuickFixCmdPost *grep* cwindow


" close the quickfix list
noremap <Leader>cl :ccl \| lcl<CR>
" copy the current filename to the clipboard
map <Leader>cf :let @*=expand("%")<CR>
" copy the current absolute path to the clipboard
map <Leader>cp :let @*=expand("%:p")<CR>


"set up ctrlp
map <Leader>t :CtrlP<CR>
map <Leader>e :CtrlPMRU<CR>
map <Leader>ft :CtrlPClearCache<CR>

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" run something in sql
map <Leader>q :w !psql -h localhost development \| less<CR>

" look up word under cursor in dash
nmap <Leader>d <Plug>DashSearch

"let g:vimrubocop_config = '.rubocop.yml'

" hide pyc files from listing
let g:netrw_list_hide= '.*\.swp$,.*\.pyc,.*sync_snapshot.*'

let g:yankring_clipboard_monitor=0

function TestFor(cmd)
  let filenames = system(expand("~/khan/webapp/tools/test_for.py") . " -f " . bufname("%"))
  for filename in split(filenames, "\n")
    execute a:cmd . " " . filename
  endfor
endfunction
command VSplitTest call TestFor("vsplit")
command VSPT VSplitTest
command SplitTest call TestFor("split")
command SPT SplitTest

set makeprg=git\ diff\ --name-status\ HEAD^\ \\\|grep\ -v\ '^D.*'\ \\\|cut\ -f\ 2\ \\\|xargs\ ka-lint

" Golang setup
" Enable '.' autocompletion in go
"au filetype go inoremap <buffer> . .<C-x><C-o>
let g:go_fmt_command = "goimports"
let g:go_rename_command = 'gopls'

au filetype go set textwidth=72
au filetype javascript set textwidth=72

autocmd FileType *
	\ if &omnifunc != '' |
	\   call SuperTabChain(&omnifunc, "<c-p>") |
	\ endif

